name: Build and Release with Nuitka

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发 (例如 v1.0.0)

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux_x64
            nuitka_arch: x86_64
          - os: macos-latest
            artifact_name: macos_arm64
            nuitka_arch: arm64
          - os: windows-latest
            artifact_name: windows_x64
            nuitka_arch: x86_64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf ccache zip
        
    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install ccache
        
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        choco install -y zip
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install nuitka zstandard ordered-set
        
    # 为所有平台添加模块包含指令
    - name: Build for Linux
      if: runner.os == 'Linux'
      run: |
        mkdir -p build/${{ matrix.artifact_name }}
        python -m nuitka \
          --standalone \
          --onefile \
          --assume-yes-for-downloads \
          --enable-plugin=tk-inter \
          --plugin-enable=pylint-warnings \
          --include-module=requests \
          --include-module=urllib3 \
          --include-module=chardet \
          --include-module=idna \
          --include-module=certifi \
          --include-module=charset_normalizer \
          --include-package-data=certifi \
          --output-filename=app \
          --output-dir=build/${{ matrix.artifact_name }} \
          src/main.py
        
    - name: Build for macOS
      if: runner.os == 'macOS'
      run: |
        mkdir -p build/${{ matrix.artifact_name }}
        python -m nuitka \
          --standalone \
          --onefile \
          --assume-yes-for-downloads \
          --enable-plugin=tk-inter \
          --plugin-enable=pylint-warnings \
          --macos-create-app-bundle \
          --macos-app-icon=assets/icon.icns \
          --macos-target-arch=${{ matrix.nuitka_arch }} \
          --include-module=requests \
          --include-module=urllib3 \
          --include-module=chardet \
          --include-module=idna \
          --include-module=certifi \
          --include-module=charset_normalizer \
          --include-package-data=certifi \
          --output-filename=app \
          --output-dir=build/${{ matrix.artifact_name }} \
          src/main.py
        
    - name: Build for Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        mkdir build\%ARTIFACT_NAME%
        python -m nuitka ^
          --standalone ^
          --onefile ^
          --assume-yes-for-downloads ^
          --enable-plugin=tk-inter ^
          --plugin-enable=pylint-warnings ^
          --windows-icon-from-ico=assets/icon.ico ^
          --windows-company-name=MyCompany ^
          --windows-product-name=MyApp ^
          --windows-file-version=1.0.0 ^
          --windows-product-version=1.0.0 ^
          --include-module=requests ^
          --include-module=urllib3 ^
          --include-module=chardet ^
          --include-module=idna ^
          --include-module=certifi ^
          --include-module=charset_normalizer ^
          --include-package-data=certifi ^
          --output-filename=app.exe ^
          --output-dir=build\%ARTIFACT_NAME% ^
          src/main.py
      env:
        ARTIFACT_NAME: ${{ matrix.artifact_name }}
        
    # 平台独立的打包步骤
    - name: Package Linux artifact
      if: runner.os == 'Linux'
      run: |
        cd build/${{ matrix.artifact_name }}
        
        # 检查可能的输出文件名
        if [ -f "app" ]; then
          mv app ${{ matrix.artifact_name }}_app
          zip -r ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}_app
        elif [ -f "app.bin" ]; then
          mv app.bin ${{ matrix.artifact_name }}_app
          zip -r ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}_app
        else
          echo "Error: No build output found! Contents:"
          ls -la
          exit 1
        fi
        
        cd ../..
        
    - name: Package macOS artifact
      if: runner.os == 'macOS'
      run: |
        cd build/${{ matrix.artifact_name }}
        
        # 检查可能的输出文件名
        if [ -f "app" ]; then
          mv app ${{ matrix.artifact_name }}_app
          zip -r ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}_app
        elif [ -f "app.bin" ]; then
          mv app.bin ${{ matrix.artifact_name }}_app
          zip -r ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}_app
        else
          echo "Error: No build output found! Contents:"
          ls -la
          exit 1
        fi
        
        cd ../..
        
    - name: Package Windows artifact
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cd build\%ARTIFACT_NAME%
        
        if exist "app.exe" (
          ren app.exe %ARTIFACT_NAME%_app.exe
          zip -r ..\%ARTIFACT_NAME%.zip %ARTIFACT_NAME%_app.exe
        ) else (
          echo Error: No build output found! Contents:
          dir
          exit /b 1
        )
        
        cd ..\..
      env:
        ARTIFACT_NAME: ${{ matrix.artifact_name }}
  
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}_build
        path: build/${{ matrix.artifact_name }}.zip
  
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Combine artifacts
      run: |
        mkdir release
        find artifacts -name '*.zip' -exec cp {} release/ \;
        
        # 创建版本说明文件
        echo "# Release Notes" > release/CHANGELOG.md
        echo "## Version ${GITHUB_REF_NAME}" >> release/CHANGELOG.md
        echo "- Built on $(date)" >> release/CHANGELOG.md
        echo "- Includes builds for Windows, macOS (ARM64) and Linux" >> release/CHANGELOG.md
        echo "" >> release/CHANGELOG.md
        echo "## Installation" >> release/CHANGELOG.md
        echo "Download the appropriate package for your system:" >> release/CHANGELOG.md
        echo "- Windows: windows_x64.zip" >> release/CHANGELOG.md
        echo "- macOS (Apple Silicon): macos_arm64.zip" >> release/CHANGELOG.md
        echo "- Linux: linux_x64.zip" >> release/CHANGELOG.md
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body_path: release/CHANGELOG.md
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/linux_x64.zip
        asset_name: linux_x64.zip
        asset_content_type: application/zip
    
    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/windows_x64.zip
        asset_name: windows_x64.zip
        asset_content_type: application/zip
    
    - name: Upload macOS Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/macos_arm64.zip
        asset_name: macos_arm64.zip
        asset_content_type: application/zip