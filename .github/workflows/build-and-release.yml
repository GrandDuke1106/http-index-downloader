name: Build and Release with Nuitka

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发 (例如 v1.0.0)

jobs:
  linux-build:
    name: Build Linux compatible binary
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
      options: --privileged
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        yum -y install glibc-static zip
      
    - name: Set up Python
      run: |
        # 设置 Python 3.11
        ln -s /opt/python/cp311-cp311/bin/python /usr/local/bin/python3.11
        ln -s /opt/python/cp311-cp311/bin/pip /usr/local/bin/pip3.11
        python3.11 --version
        
    - name: Install build tools and dependencies
      run: |
        pip3.11 install --upgrade pip
        pip3.11 install nuitka zstandard ordered-set
        pip3.11 install -r requirements.txt
        
    - name: Build with Nuitka
      run: |
        mkdir -p build/linux_x64
        python3.11 -m nuitka \
          --standalone \
          --onefile \
          --assume-yes-for-downloads \
          --enable-plugin=tk-inter \
          --plugin-enable=pylint-warnings \
          --include-package-data=certifi \
          --output-filename=app \
          --output-dir=build/linux_x64 \
          src/main.py
        
    - name: Package Linux artifact
      run: |
        cd build/linux_x64
        
        if [ -f "app" ]; then
          mv app linux_x64_app
          zip -r ../linux_x64.zip linux_x64_app
        elif [ -f "app.bin" ]; then
          mv app.bin linux_x64_app
          zip -r ../linux_x64.zip linux_x64_app
        else
          echo "Error: No build output found! Contents:"
          ls -la
          exit 1
        fi
        
        cd ../..
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux_x64_build
        path: build/linux_x64.zip
  
  macos-build:
    name: Build for macOS
    runs-on: macos-latest
    needs: linux-build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install macOS dependencies
      run: |
        brew install ccache
        
    - name: Install build tools and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka zstandard ordered-set
        pip install -r requirements.txt
        
    - name: Build for macOS
      run: |
        mkdir -p build/macos_arm64
        python -m nuitka \
          --standalone \
          --onefile \
          --assume-yes-for-downloads \
          --enable-plugin=tk-inter \
          --plugin-enable=pylint-warnings \
          --macos-create-app-bundle \
          --macos-app-icon=assets/icon.icns \
          --macos-target-arch=arm64 \
          --output-filename=app \
          --output-dir=build/macos_arm64 \
          src/main.py
        
    - name: Package macOS artifact
      run: |
        cd build/macos_arm64
        
        if [ -f "app" ]; then
          mv app macos_arm64_app
          zip -r ../macos_arm64.zip macos_arm64_app
        elif [ -f "app.bin" ]; then
          mv app.bin macos_arm64_app
          zip -r ../macos_arm64.zip macos_arm64_app
        else
          echo "Error: No build output found! Contents:"
          ls -la
          exit 1
        fi
        
        cd ../..
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos_arm64_build
        path: build/macos_arm64.zip
  
  windows-build:
    name: Build for Windows
    runs-on: windows-latest
    needs: linux-build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Windows dependencies
      run: |
        choco install -y zip
        
    - name: Install build tools and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka zstandard ordered-set
        pip install -r requirements.txt
        
    - name: Build for Windows
      shell: cmd
      run: |
        mkdir build\windows_x64
        python -m nuitka ^
          --standalone ^
          --onefile ^
          --assume-yes-for-downloads ^
          --enable-plugin=tk-inter ^
          --plugin-enable=pylint-warnings ^
          --windows-icon-from-ico=assets/icon.ico ^
          --windows-company-name=MyCompany ^
          --windows-product-name=MyApp ^
          --windows-file-version=1.0.0 ^
          --windows-product-version=1.0.0 ^
          --output-filename=app.exe ^
          --output-dir=build\windows_x64 ^
          src/main.py
        
    - name: Package Windows artifact
      shell: cmd
      run: |
        cd build\windows_x64
        
        if exist "app.exe" (
          ren app.exe windows_x64_app.exe
          zip -r ..\windows_x64.zip windows_x64_app.exe
        ) else (
          echo Error: No build output found! Contents:
          dir
          exit /b 1
        )
        
        cd ..\..
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows_x64_build
        path: build/windows_x64.zip
  
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [linux-build, macos-build, windows-build]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Combine artifacts
      run: |
        mkdir release
        find artifacts -name '*.zip' -exec cp {} release/ \;
        
        # 创建版本说明文件
        echo "# Release Notes" > release/CHANGELOG.md
        echo "## Version ${GITHUB_REF_NAME}" >> release/CHANGELOG.md
        echo "- Built on $(date)" >> release/CHANGELOG.md
        echo "- Includes builds for Windows, macOS (ARM64) and Linux" >> release/CHANGELOG.md
        echo "- Linux build is compatible with CentOS 7 and older systems" >> release/CHANGELOG.md
        echo "" >> release/CHANGELOG.md
        echo "## Installation" >> release/CHANGELOG.md
        echo "Download the appropriate package for your system:" >> release/CHANGELOG.md
        echo "- Windows: windows_x64.zip" >> release/CHANGELOG.md
        echo "- macOS (Apple Silicon): macos_arm64.zip" >> release/CHANGELOG.md
        echo "- Linux (CentOS 7 compatible): linux_x64.zip" >> release/CHANGELOG.md
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: release/CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          release/linux_x64.zip
          release/macos_arm64.zip
          release/windows_x64.zip